{
  "name": "Msg-perf-tool",
  "tagline": "MPT is a tool for running performance tests on AMQP and STOMP messaging systems.",
  "body": "MPT: messaging performance tool\r\n============\r\n\r\nBuild Status\r\n----\r\nLinux Build Status: [![Linux Build Status](https://travis-ci.org/orpiske/msg-perf-tool.svg?branch=master)](https://travis-ci.org/orpiske/msg-perf-tool) \r\n\r\nIntroduction:\r\n----\r\n\r\nMPT is a tool for running performance tests on messaging systems. Current development\r\nversion supports AMQP and STOMP messaging protocols. Support for MQTT and OpenWire \r\nis planned for the future. The test data is saved in a CSV format and can be exported\r\nto ElasticSearch DB. That allows it to be visualized using the \r\n[Messaging Performance UI](https://github.com/orpiske/msg-perf-ui)\r\n\r\nDependencies:\r\n----\r\n\r\nRuntime/Compilation:\r\n* cmake\r\n* gcc or clang\r\n* qpid-proton-c-devel\r\n* [litestomp](https://github.com/orpiske/litestomp) (optional) for STOMP support\r\n* python\r\n\r\nRecommended:\r\n* iperf (as a good practice, for testing network performance prior to test execution)\r\n\r\n\r\nRequirements\r\n----\r\nDisk Space:\r\nThe clients may generate a lot of data depending on how much messages are sent\r\nper second. On my baseline system (two servers with Quad-Core AMD Opteron 2376 @ 8x 2.3GHz)\r\non a gigabit network, it generates around 1Gb of data per hour, transferring\r\naround 66.000 messages per second.\r\n\r\nOperating Systems:\r\n* Linux: x86 and x86_64\r\n* OS X: x86\r\n\r\n\r\nBroker Settings: ActiveMQ\r\n----\r\n\r\nActiveMQ may need to have the inactivity monitor disabled. It can be done by\r\nadding the following setting in the conf/activemq.xml, in the transport connector\r\nsetting:\r\n\r\n```\r\ntransport.useInactivityMonitor=false\r\n```\r\n\r\nFor example:\r\n\r\n```\r\n<transportConnector name=\"amqp\" uri=\"amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&amp;transport.useInactivityMonitor=false\"/>\r\n```\r\n\r\n\r\nUsage - Performance Tool:\r\n----\r\n\r\nHere's an example of how to run a 10 minute load test, with 4 concurrent senders,\r\n4 concurrent receivers, sending 256 bytes of data per message.\r\n```\r\nmpt-runner.sh -l /tmp/log -b amqp://<amqp server>:5672/<queue name> -d 10 -p 4 -s 256 -n \"sample test\"\r\n```\r\n\r\nIt's possible to have more complex deployment scenarios by running the sender and receiver separately. In this case, you have to\r\nrun the test steps manually:\r\n\r\nRun the receiver (the controller will print the PID, please take note of that):\r\n```\r\nmpt-receiver -b amqp://<amqp server>:5672/<queue name> --log-level=stat -d 10 -p 4 --logdir=/tmp/log --daemon\r\n```\r\n\r\nRun the sender (the controller will print the PID, please take note of that):\r\n\r\n```\r\nmpt-sender -b amqp://<amqp server>:5672/<queue name> --log-level=stat -d 10 -p 4 --logdir=/tmp/log --daemon\r\n```\r\n\r\nThis is all that is required for running very simple tests. For larger test \r\nscenarios or integration with other tools, please keep reading the sections \r\nbelow.\r\n\r\n\r\nUsage - ElasticSearch Integration:\r\n----\r\n\r\nThe performance data generated by this tool can be exported to a \r\n[ElasticSearch](https://www.elastic.co/) database so that it can be visualized \r\nin the [Messaging Performance UI](https://github.com/orpiske/msg-perf-ui).\r\n\r\n\r\nOverall, the integration is pretty simple and requires only two modifications to \r\nthe basic configuration. First, you need to configure it to allow Cross Origin \r\nResource Sharing (CORS). To do so, add the following to the configuration file \r\nin config/elasticsearch.yml:\r\n\r\n```\r\nhttp.cors.allow-origin: \"*\"\r\nhttp.cors.enabled: true\r\n```\r\n\r\nIt may also be necessary to configure it to listen on all interfaces (or, at \r\nleast, the one desired), so that it can be accessed from anywhere. You can do so\r\n by setting the following parameter:\r\n\r\n```\r\nnetwork.host: 0.0.0.0\r\n```\r\n\r\nAt the moment, it does not implement nor require any security configuration, \r\ntherefore it's highly recommended to setup adequate security mechanisms on top \r\nof your instance for publicly available instances.\r\n\r\n\r\nUsage - Runner:\r\n----\r\n\r\nDealing with the synchronization and parameters of performance can be daunting, \r\nthough, therefore a runner script is available to simplify the execution. Before\r\nrunning the runner, it's advised to create configuration files for both the \r\napplication as well as the test scenario. The file configuration should be simple \r\nand self-explanatory, since they match the same name of the test parameters.\r\n\r\n\r\n```\r\nmpt-runner.sh -l /path/to/log -t 5000 -b <protocol>://<host>:<port>/queue/<queue> -d 5 -p 1 -s 32 -C /path/to/mpt-loader.conf -T /path/to/stomp-small-test.conf -R 002\r\n```\r\n\r\nAttention: the runner requires a ElasticSearch database. This behavior will be \r\nchanged in the future.\r\n\r\n\r\nUsage - Loader\r\n----\r\n\r\nThese steps are automatically handled by the runner, however, in case you need \r\nto run them, this is how it works:\r\n\r\nThe first step is to register the Software Under Test in the database: \r\n\r\n```\r\nmpt-loader.py --register \\\r\n\t--sut-key \"activemq\" \\\r\n\t--sut-name \"ActiveMQ\" \\\r\n\t--sut-version \"5.13.3\"  \\\r\n\t--url http://localhost:9200/\r\n```\r\n\r\n\r\nThe second is to record the test info. This part should contain the details about \r\nthe test (messaging parameters, hardware information, etc)\r\n\r\n```\r\nmpt-loader.py --testinfo --url http://localhost:9200 \\\r\n\t\t--test-run \"001\" \\\r\n\t\t--sut-key \"activemq\" \\\r\n\t\t--test-start-time \"20167-11 14:48:03\" \\\r\n\t\t--test-duration 5m \\\r\n\t\t--broker-sys-os-version 24 \\\r\n\t\t--broker-sys-os-name Fedora \\\r\n\t\t--broker-sys-os-type Linux  \\\r\n\t\t--test-comment \"Small local test on Fedora 24\" \\\r\n\t\t--test-result-comment \"Run ok, no comments\" \\\r\n\t\t--broker-sys-info \"Thinkpad T450/12Gb RAM/521gb SSD\" \\\r\n\t\t--consumer-sys-info \"Thinkpad T450/12Gb RAM/521gb SSD\" \\\r\n\t\t--producer-sys-info \"Thinkpad T450/12Gb RAM/521gb SSD\"  \\\r\n\t\t--msg-endpoint-type \"queue\"\r\n```\r\n\r\nAfter the SUT and test information is recorded, the test result information can\r\nbe loaded in 3 steps:\r\n\r\nLoad sender throughput data:\r\n\r\n```\r\nmpt-loader.py --load throughput \\\r\n\t\t--url http://localhost:9200 \\\r\n\t\t--sut-name \"ActiveMQ\" \\\r\n\t\t--sut-key activemq \\\r\n\t\t--sut-version \"5.13.3\" \\\r\n\t\t--test-run \"001\" \\\r\n\t\t--msg-direction sender \\\r\n\t\t--filename /path/to/sender-throughput-<pid>.csv\r\n```\r\n\r\n\r\nLoad receiver latency data:\r\n\r\n```\r\nmpt-loader.py --load latency \\\r\n\t\t--url http://localhost:9200 \\\r\n\t\t--sut-name \"ActiveMQ\" \\\r\n\t\t--sut-key activemq \\\r\n\t\t--sut-version \"5.13.3\" \\\r\n\t\t--test-run \"001\" \\\r\n\t\t--msg-direction receiver \\\r\n\t\t--filename /path/to/receiver-latency-<pid>.csv\r\n```\r\n\r\n\r\nLoad receiver throughput data:\r\n\r\n```\r\nmpt-loader.py --load throughput \\\r\n\t\t--url http://localhost:9200 \\\r\n\t\t--sut-name \"ActiveMQ\" \\\r\n\t\t--sut-key activemq \\\r\n\t\t--sut-version \"5.13.3\" \\\r\n\t\t--test-run \"001\" \\\r\n\t\t--msg-direction receiver \\\r\n\t\t--filename /path/to/receiver-throughput-<pid>.csv\r\n```\r\n\r\n\r\nMost of the test parameters to a configuration file and have the loader use it \r\n(ie.: using --config and --config-test). It uses 2 separate configuration files:\r\n one contains the application configuration (ie.: URL for ES) and the other \r\ncontains the test parameters. For example:\r\n\r\n```\r\n\tmpt-loader.py --load latency \\\r\n\t\t--config /path/to/application/config \\\r\n\t\t--config-test /path/to/test/config \\\r\n\t\t--test-run 001 \\\r\n\t\t--msg-direction receiver \\\r\n\t\t--filename /path/to/receiver-latency-<pid>.csv\r\n```\r\n\r\nThe binaries provide configuration samples that can be modified: \r\n* Loader configuration: /usr/share/mpt/mpt-loader.conf\r\n* Test case configuration: /usr/share/mpt/sample-test-case.conf\r\n\r\nThe configuration parameters are the same as passed from the command line.\r\n\r\n\r\nBinaries\r\n----\r\n\r\nBinaries for this tool, for Fedora, CentOS and RHEL, can be found on my COPR at\r\nhttps://copr.fedorainfracloud.org/coprs/orpiske/msg-perf-tool/\r\n\r\n\r\nTips\r\n----\r\n\r\n* Run the clients and the broker in different servers\r\n* Make sure that the time is properly set on both servers\r\n* Run on an dedicated network (or, at least, avoid hours of peak usage)\r\n* Measure the network performance before running (ie.: use iperf)\r\n* Ideally, you should run at a fixed rate instead of flooding the brokers.\r\nBrokers tend to get slower as the queue size increase.\r\n\r\n\r\nLicense\r\n----\r\n\r\nThe code is licensed under Apache License v2\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}